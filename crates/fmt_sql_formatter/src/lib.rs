use std::io::Read;

use sqlparser::{ast::Statement, parser::Parser};

#[derive(Default)]
struct Formatter {
    options: FormatterOptions,
    generator: CodeGenerator,
    current_context: FormatContext,
}

impl Formatter {
    fn push_statement(&mut self, stmt: Statement) {
        self.generator.generate_statement(stmt);
    }

    fn into_code(self) -> String {
        unsafe { String::from_utf8_unchecked(self.generator.bytes) }
    }
}

struct Node {
    statements: Vec<Statement>, // TODO(cnpryer)
}

#[derive(Default)]
struct CodeGenerator {
    bytes: Vec<u8>,
}

impl CodeGenerator {
    /// Generate code from a `sqlparser::parser::Statement`.
    fn generate_statement(&mut self, stmt: Statement) {
        self.push_statement_bytes(stmt);
    }

    /// Pushes generated bytes for `sqlparser::parser::Statement`.
    fn push_statement_bytes(&mut self, stmt: Statement) {
        todo!()
    }
}

struct FormatterOptions {
    line_length: usize,
    indentation_kind: IntentationKind,
}

impl Default for FormatterOptions {
    fn default() -> Self {
        Self {
            line_length: 88,
            indentation_kind: IntentationKind::Indent,
        }
    }
}

#[derive(Default)]
struct FormatContext {
    needs_semicolon: bool,
    current_indentation: u8,
}

enum IntentationKind {
    Indent,
    Space,
}

pub fn format(s: &str) -> String {
    let node = match Parser::new(&sqlparser::dialect::MsSqlDialect {}).try_with_sql(s) {
        Ok(mut parser) => Node {
            statements: parser.parse_statements().expect("parse sql statements"),
        },
        Err(_) => panic!("failed to parse sql ast"),
    };

    format_node(node, FormatterOptions::default())
}

fn format_node(root: Node, formatter_options: FormatterOptions) -> String {
    let mut formatter = Formatter {
        options: formatter_options,
        generator: CodeGenerator { bytes: Vec::new() },
        current_context: FormatContext::default(),
    };

    root.statements
        .into_iter()
        .for_each(|stmt| formatter.push_statement(stmt));
    formatter.into_code()
}
